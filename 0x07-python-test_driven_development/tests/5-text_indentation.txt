================================
How to Use 5-text_indentation.py
================================
This module defines a text-indentation function ``text_indentation(text)``.

Usage
=====
Text is printed with two new lines after each of the characters ``.``, ``?``,
and ``:``.

    >>> text_indentation = __import__('5-text_indentation').text_indentation
    >>> text_indentation("Hello?")
    Hello?
    <BLANKLINE>

Basic Examples
==============

    >>> text_indentation("Hello.")
    Hello.
    <BLANKLINE>

    >>> text_indentation("What:")
    What:
    <BLANKLINE>

    >>> text_indentation("Hello? How are you.")
    Hello?
    <BLANKLINE>
    How are you.
    <BLANKLINE>

    >>> text_indentation("First: Second? Third.")
    First:
    <BLANKLINE>
    Second?
    <BLANKLINE>
    Third.
    <BLANKLINE>

Multiple Special Characters
==========================

    >>> text_indentation("One. Two. Three.")
    One.
    <BLANKLINE>
    Two.
    <BLANKLINE>
    Three.
    <BLANKLINE>

    >>> text_indentation("Question? Another? Final?")
    Question?
    <BLANKLINE>
    Another?
    <BLANKLINE>
    Final?
    <BLANKLINE>

    >>> text_indentation("Colon: Another: Last:")
    Colon:
    <BLANKLINE>
    Another:
    <BLANKLINE>
    Last:
    <BLANKLINE>

    >>> text_indentation("Mixed. Question? Colon:")
    Mixed.
    <BLANKLINE>
    Question?
    <BLANKLINE>
    Colon:
    <BLANKLINE>

Leading Spaces Removal
=====================
No spaces are printed at the beginning of a line.

    >>> text_indentation("   Hi there.")
    Hi there.
    <BLANKLINE>

    >>> text_indentation("    Question?")
    Question?
    <BLANKLINE>

    >>> text_indentation("       Colon:")
    Colon:
    <BLANKLINE>

    >>> text_indentation("  Leading spaces. More text.")
    Leading spaces.
    <BLANKLINE>
    More text.
    <BLANKLINE>

    >>> text_indentation("          ")

Trailing Spaces Removal
======================
Similarly, no spaces are printed at the end of each printed line.

    >>> text_indentation("Hello.   ")
    Hello.
    <BLANKLINE>

    >>> text_indentation("Question?     ")
    Question?
    <BLANKLINE>

    >>> text_indentation("Colon:        ")
    Colon:
    <BLANKLINE>

    >>> text_indentation("    Woah now.    This is messy.   ")
    Woah now.
    <BLANKLINE>
    This is messy.
    <BLANKLINE>

    >>> text_indentation("   Spaces.   More text.   ")
    Spaces.
    <BLANKLINE>
    More text.
    <BLANKLINE>

Both Leading and Trailing Spaces
================================

    >>> text_indentation("   Both sides.   ")
    Both sides.
    <BLANKLINE>

    >>> text_indentation("  Question?  Answer.  ")
    Question?
    <BLANKLINE>
    Answer.
    <BLANKLINE>

    >>> text_indentation("    Start:    Middle.    End?    ")
    Start:
    <BLANKLINE>
    Middle.
    <BLANKLINE>
    End?
    <BLANKLINE>

No Special Characters
====================
New lines are only printed for the characters ``.``, ``?``, and ``:`` -
text not ending with one of these characters is not ended with a new line.

    >>> text_indentation("No ending period, what bad grammar")
    No ending period, what bad grammar

    >>> text_indentation("Just some text")
    Just some text

    >>> text_indentation("Multiple words without special chars")
    Multiple words without special chars

Existing New Lines
==================
New lines within a string are printed as normal.

    >>> text_indentation("Let's print a new-line! Here goes:\nPrinted.")
    Let's print a new-line! Here goes:
    <BLANKLINE>
    <BLANKLINE>
    Printed.
    <BLANKLINE>

    >>> text_indentation("\n\n\n We just printed three new lines.")
    <BLANKLINE>
    <BLANKLINE>
    <BLANKLINE>
    We just printed three new lines.
    <BLANKLINE>

    >>> text_indentation("A sneaky \n new line.")
    A sneaky 
    new line.
    <BLANKLINE>

    >>> text_indentation("Before\nAfter?")
    Before
    After?
    <BLANKLINE>

    >>> text_indentation("Line1.\nLine2:")
    Line1.
    <BLANKLINE>
    <BLANKLINE>
    Line2:
    <BLANKLINE>

    >>> text_indentation("Text\n\nDouble newline.")
    Text
    <BLANKLINE>
    Double newline.
    <BLANKLINE>

Empty String
============

    >>> text_indentation("")

Only Special Characters
=======================

    >>> text_indentation(".")
    .
    <BLANKLINE>

    >>> text_indentation("?")
    ?
    <BLANKLINE>

    >>> text_indentation(":")
    :
    <BLANKLINE>

    >>> text_indentation(".?:")
    .
    <BLANKLINE>
    ?
    <BLANKLINE>
    :
    <BLANKLINE>

    >>> text_indentation(".....")
    .
    <BLANKLINE>
    .
    <BLANKLINE>
    .
    <BLANKLINE>
    .
    <BLANKLINE>
    .
    <BLANKLINE>

    >>> text_indentation("????")
    ?
    <BLANKLINE>
    ?
    <BLANKLINE>
    ?
    <BLANKLINE>
    ?
    <BLANKLINE>

    >>> text_indentation("::::")
    :
    <BLANKLINE>
    :
    <BLANKLINE>
    :
    <BLANKLINE>
    :
    <BLANKLINE>

Special Characters with Spaces
==============================

    >>> text_indentation("   .   ")
    .
    <BLANKLINE>

    >>> text_indentation("   ?   ")
    ?
    <BLANKLINE>

    >>> text_indentation("   :   ")
    :
    <BLANKLINE>

    >>> text_indentation("  .  ?  :  ")
    .
    <BLANKLINE>
    ?
    <BLANKLINE>
    :
    <BLANKLINE>

Complex Text Scenarios
======================

    >>> text_indentation("Hello. How are you? I am fine: thanks.")
    Hello.
    <BLANKLINE>
    How are you?
    <BLANKLINE>
    I am fine:
    <BLANKLINE>
    thanks.
    <BLANKLINE>

    >>> text_indentation("Start.Middle?End:")
    Start.
    <BLANKLINE>
    Middle?
    <BLANKLINE>
    End:
    <BLANKLINE>

    >>> text_indentation("No space.After period?Same here:And here")
    No space.
    <BLANKLINE>
    After period?
    <BLANKLINE>
    Same here:
    <BLANKLINE>
    And here

Long Text Example
=================

    >>> text_indentation("Lorem ipsum dolor sit amet, consectetur adipiscing "
    ... "elit. Quonam modo? Utrum igitur tibi litteram videor an totas paginas "
    ... "commovere? Non autem hoc: igitur ne illud quidem. Fortasse id optimum, "
    ... "sed ubi illud: Plus semper voluptatis? Teneo, inquit, finem illi videri "
    ... "nihil dolere. Transfer idem ad modestiam vel temperantiam, quae est "
    ... "moderatio cupiditatum rationi oboediens. Si id dicis, vicimus. Inde "
    ... "sermone vario sex illa a Dipylo stadia confecimus. Sin aliud quid "
    ... "voles, postea. Quae animi affectio suum cuique tribuens atque hanc, "
    ... "quam dico. Utinam quidem dicerent alium alio beatiorem! Iam ruinas "
    ... "videres") # doctest: +NORMALIZE_WHITESPACE
    Lorem ipsum dolor sit amet, consectetur adipiscing elit.
    <BLANKLINE>
    Quonam modo?
    <BLANKLINE>
    Utrum igitur tibi litteram videor an totas paginas commovere?
    <BLANKLINE>
    Non autem hoc:
    <BLANKLINE>
    igitur ne illud quidem.
    <BLANKLINE>
    Fortasse id optimum, sed ubi illud:
    <BLANKLINE>
    Plus semper voluptatis?
    <BLANKLINE>
    Teneo, inquit, finem illi videri nihil dolere.
    <BLANKLINE>
    Transfer idem ad modestiam vel temperantiam, quae est moderatio cupiditatum rationi oboediens.
    <BLANKLINE>
    Si id dicis, vicimus.
    <BLANKLINE>
    Inde sermone vario sex illa a Dipylo stadia confecimus.
    <BLANKLINE>
    Sin aliud quid voles, postea.
    <BLANKLINE>
    Quae animi affectio suum cuique tribuens atque hanc, quam dico.
    <BLANKLINE>
    Utinam quidem dicerent alium alio beatiorem! Iam ruinas videres

Numbers and Special Characters
=============================

    >>> text_indentation("Version 1.0 is ready.")
    Version 1.
    <BLANKLINE>
    0 is ready.
    <BLANKLINE>

    >>> text_indentation("Is 2.5 > 2.0? Yes.")
    Is 2.
    <BLANKLINE>
    5 > 2.
    <BLANKLINE>
    0?
    <BLANKLINE>
    Yes.
    <BLANKLINE>

    >>> text_indentation("Score: 95.5 points.")
    Score:
    <BLANKLINE>
    95.
    <BLANKLINE>
    5 points.
    <BLANKLINE>

    >>> text_indentation("3.14159 is pi. What about e: 2.71828?")
    3.
    <BLANKLINE>
    14159 is pi.
    <BLANKLINE>
    What about e:
    <BLANKLINE>
    2.
    <BLANKLINE>
    71828?
    <BLANKLINE>

Unicode and Special Characters
=============================

    >>> text_indentation("¿Cómo estás?")
    ¿Cómo estás?
    <BLANKLINE>

    >>> text_indentation("French: Ça va? Oui.")
    French:
    <BLANKLINE>
    Ça va?
    <BLANKLINE>
    Oui.
    <BLANKLINE>

    >>> text_indentation("Math: π ≈ 3.14.")
    Math:
    <BLANKLINE>
    π ≈ 3.
    <BLANKLINE>
    14.
    <BLANKLINE>

Invalid Text
============
The parameter ``text`` must be a string. Otherwise, a TypeError is raised.

    >>> text_indentation(7)
    Traceback (most recent call last):
    TypeError: text must be a string

    >>> text_indentation(42)
    Traceback (most recent call last):
    TypeError: text must be a string

    >>> text_indentation(3.14)
    Traceback (most recent call last):
    TypeError: text must be a string

    >>> text_indentation(-5)
    Traceback (most recent call last):
    TypeError: text must be a string

    >>> text_indentation({"one": 1, "two": 2})
    Traceback (most recent call last):
    TypeError: text must be a string

    >>> text_indentation({})
    Traceback (most recent call last):
    TypeError: text must be a string

    >>> text_indentation(None)
    Traceback (most recent call last):
    TypeError: text must be a string

    >>> text_indentation(True)
    Traceback (most recent call last):
    TypeError: text must be a string

    >>> text_indentation(False)
    Traceback (most recent call last):
    TypeError: text must be a string

    >>> text_indentation([])
    Traceback (most recent call last):
    TypeError: text must be a string

    >>> text_indentation([1, 2, 3])
    Traceback (most recent call last):
    TypeError: text must be a string

    >>> text_indentation(["hello", "world"])
    Traceback (most recent call last):
    TypeError: text must be a string

    >>> text_indentation(())
    Traceback (most recent call last):
    TypeError: text must be a string

    >>> text_indentation((1, 2, 3))
    Traceback (most recent call last):
    TypeError: text must be a string

    >>> text_indentation(complex(1, 2))
    Traceback (most recent call last):
    TypeError: text must be a string

    >>> text_indentation(set())
    Traceback (most recent call last):
    TypeError: text must be a string

    >>> text_indentation({1, 2, 3})
    Traceback (most recent call last):
    TypeError: text must be a string

Special Float Values
===================

    >>> text_indentation(float('inf'))
    Traceback (most recent call last):
    TypeError: text must be a string

    >>> text_indentation(float('-inf'))
    Traceback (most recent call last):
    TypeError: text must be a string

    >>> text_indentation(float('nan'))
    Traceback (most recent call last):
    TypeError: text must be a string

Missing Arguments
=================

    >>> text_indentation()
    Traceback (most recent call last):
    TypeError: text_indentation() missing 1 required positional argument: 'text'

Too Many Arguments
==================

    >>> text_indentation("Hello.", "World.")
    Traceback (most recent call last):
    TypeError: text_indentation() takes 1 positional argument but 2 were given

    >>> text_indentation("One.", "Two.", "Three.")
    Traceback (most recent call last):
    TypeError: text_indentation() takes 1 positional argument but 3 were given
