==============================
How to Use 2-matrix_divided.py
==============================

This module defines a matrix division function ``matrix_divided(matrix, div)``.

Usage
=====

``matrix_divided(...)`` returns a new matrix that is a copy of the parameter
``matrix`` with all elements divided by ``div``.

    >>> matrix_divided = __import__('2-matrix_divided').matrix_divided
    >>> matrix = [
    ...     [3, 6, 9],
    ...     [12, 15, 18]
    ... ]
    >>> print(matrix_divided(matrix, 3))
    [[1.0, 2.0, 3.0], [4.0, 5.0, 6.0]]

Note that quotients are rounded to a maximum of two decimal places.

    >>> matrix = [
    ...     [1, 2, 3],
    ...     [4, 5, 6]
    ... ]
    >>> print(matrix_divided(matrix, 3))
    [[0.33, 0.67, 1.0], [1.33, 1.67, 2.0]]

The original matrix is left unchanged.

    >>> print(matrix)
    [[1, 2, 3], [4, 5, 6]]

Basic Division Tests
===================

    >>> matrix = [
    ...     [10, 20, 30],
    ...     [40, 50, 60]
    ... ]
    >>> print(matrix_divided(matrix, 10))
    [[1.0, 2.0, 3.0], [4.0, 5.0, 6.0]]

    >>> matrix = [
    ...     [2, 4, 6, 8]
    ... ]
    >>> print(matrix_divided(matrix, 2))
    [[1.0, 2.0, 3.0, 4.0]]

    >>> matrix = [
    ...     [100],
    ...     [200],
    ...     [300]
    ... ]
    >>> print(matrix_divided(matrix, 100))
    [[1.0], [2.0], [3.0]]

Floating Point Numbers
=====================

The function can also handle floating-point numbers.

    >>> matrix = [
    ...     [1.1, -2.2, 3.3],
    ...     [4.4, 5.5, -6.6]
    ... ]
    >>> print(matrix_divided(matrix, 3))
    [[0.37, -0.73, 1.1], [1.47, 1.83, -2.2]]

    >>> matrix = [
    ...     [7.5, 2.5],
    ...     [-1.5, 0.5]
    ... ]
    >>> print(matrix_divided(matrix, 2.5))
    [[3.0, 1.0], [-0.6, 0.2]]

Mixed Integer and Float Types
============================

Integers and floats can be combined.

    >>> matrix = [
    ...     [1, -2.2, 3, 4.4, 5],
    ...     [-6.6, 7.00, 8, 9.999, 10]
    ... ]
    >>> print(matrix_divided(matrix, 3))
    [[0.33, -0.73, 1.0, 1.47, 1.67], [-2.2, 2.33, 2.67, 3.33, 3.33]]

    >>> matrix = [
    ...     [0, 1.5, 2],
    ...     [3.0, 4, -5.5]
    ... ]
    >>> print(matrix_divided(matrix, 1.5))
    [[0.0, 1.0, 1.33], [2.0, 2.67, -3.67]]

Zero Values in Matrix
====================

    >>> matrix = [
    ...     [0, 0, 0],
    ...     [0, 0, 0]
    ... ]
    >>> print(matrix_divided(matrix, 1))
    [[0.0, 0.0, 0.0], [0.0, 0.0, 0.0]]

    >>> matrix = [
    ...     [0, 5, -10],
    ...     [15, 0, 25]
    ... ]
    >>> print(matrix_divided(matrix, 5))
    [[0.0, 1.0, -2.0], [3.0, 0.0, 5.0]]

Large Numbers
=============

    >>> matrix = [
    ...     [1000000, 2000000],
    ...     [3000000, 4000000]
    ... ]
    >>> print(matrix_divided(matrix, 1000000))
    [[1.0, 2.0], [3.0, 4.0]]

Small Divisors
=============

    >>> matrix = [
    ...     [1, 2],
    ...     [3, 4]
    ... ]
    >>> print(matrix_divided(matrix, 0.1))
    [[10.0, 20.0], [30.0, 40.0]]

    >>> matrix = [
    ...     [0.5, 1.5]
    ... ]
    >>> print(matrix_divided(matrix, 0.25))
    [[2.0, 6.0]]

Negative Numbers
===============

    >>> matrix = [
    ...     [-3, -6, -9],
    ...     [-12, -15, -18]
    ... ]
    >>> print(matrix_divided(matrix, -3))
    [[1.0, 2.0, 3.0], [4.0, 5.0, 6.0]]

    >>> matrix = [
    ...     [10, -20, 30],
    ...     [-40, 50, -60]
    ... ]
    >>> print(matrix_divided(matrix, -10))
    [[-1.0, 2.0, -3.0], [4.0, -5.0, 6.0]]

Single Element Matrix
====================

    >>> matrix = [
    ...     [42]
    ... ]
    >>> print(matrix_divided(matrix, 6))
    [[7.0]]

    >>> matrix = [
    ...     [-3.14159]
    ... ]
    >>> print(matrix_divided(matrix, 3.14159))
    [[-1.0]]

Large Matrices
=============

    >>> matrix = [
    ...     [1, 2, 3, 4, 5],
    ...     [6, 7, 8, 9, 10],
    ...     [11, 12, 13, 14, 15],
    ...     [16, 17, 18, 19, 20]
    ... ]
    >>> print(matrix_divided(matrix, 2))
    [[0.5, 1.0, 1.5, 2.0, 2.5], [3.0, 3.5, 4.0, 4.5, 5.0], [5.5, 6.0, 6.5, 7.0, 7.5], [8.0, 8.5, 9.0, 9.5, 10.0]]

Invalid Matrices
===============

The parameter ``matrix`` must be a list of lists consisting of either ints or
floats. If ``matrix`` is not a list, a TypeError is raised.

    >>> matrix = "not a list"
    >>> print(matrix_divided(matrix, 3))
    Traceback (most recent call last):
    TypeError: matrix must be a matrix (list of lists) of integers/floats

    >>> matrix = 123
    >>> print(matrix_divided(matrix, 3))
    Traceback (most recent call last):
    TypeError: matrix must be a matrix (list of lists) of integers/floats

    >>> matrix = None
    >>> print(matrix_divided(matrix, 3))
    Traceback (most recent call last):
    TypeError: matrix must be a matrix (list of lists) of integers/floats

    >>> matrix = True
    >>> print(matrix_divided(matrix, 3))
    Traceback (most recent call last):
    TypeError: matrix must be a matrix (list of lists) of integers/floats

    >>> matrix = {'a': 1, 'b': 2}
    >>> print(matrix_divided(matrix, 3))
    Traceback (most recent call last):
    TypeError: matrix must be a matrix (list of lists) of integers/floats

Note that an empty list will raise the TypeError.

    >>> matrix = []
    >>> print(matrix_divided(matrix, 3))
    Traceback (most recent call last):
    TypeError: matrix must be a matrix (list of lists) of integers/floats

But an empty list of lists will succeed.

    >>> matrix = [[]]
    >>> print(matrix_divided(matrix, 3))
    [[]]

    >>> matrix = [[], []]
    >>> print(matrix_divided(matrix, 5))
    [[], []]

An identical TypeError is raised if ``matrix`` is not specifically a list of
lists.

    >>> matrix = [1, 2, 3]
    >>> print(matrix_divided(matrix, 3))
    Traceback (most recent call last):
    TypeError: matrix must be a matrix (list of lists) of integers/floats

    >>> matrix = [[1, 2], 3, [4, 5]]
    >>> print(matrix_divided(matrix, 2))
    Traceback (most recent call last):
    TypeError: matrix must be a matrix (list of lists) of integers/floats

    >>> matrix = [None, [1, 2]]
    >>> print(matrix_divided(matrix, 3))
    Traceback (most recent call last):
    TypeError: matrix must be a matrix (list of lists) of integers/floats

The same TypeError is raised yet again if any elements in ``matrix`` are
neither ints nor floats.

    >>> matrix = [
    ...     [1, 2, 3],
    ...     [4, "not a number", 6]
    ... ]
    >>> print(matrix_divided(matrix, 3))
    Traceback (most recent call last):
    TypeError: matrix must be a matrix (list of lists) of integers/floats

    >>> matrix = [
    ...     [1, 2, None],
    ...     [4, 5, 6]
    ... ]
    >>> print(matrix_divided(matrix, 2))
    Traceback (most recent call last):
    TypeError: matrix must be a matrix (list of lists) of integers/floats

    >>> matrix = [
    ...     [True, False],
    ...     [1, 2]
    ... ]
    >>> print(matrix_divided(matrix, 1))
    [[1.0, 0.0], [1.0, 2.0]]

    >>> matrix = [
    ...     [[1, 2], [3, 4]],
    ...     [5, 6]
    ... ]
    >>> print(matrix_divided(matrix, 2))
    Traceback (most recent call last):
    TypeError: matrix must be a matrix (list of lists) of integers/floats

    >>> matrix = [
    ...     [1, 2, complex(3, 4)],
    ...     [5, 6, 7]
    ... ]
    >>> print(matrix_divided(matrix, 3))
    Traceback (most recent call last):
    TypeError: matrix must be a matrix (list of lists) of integers/floats

    >>> matrix = [
    ...     [1, 2, [3]],
    ...     [4, 5, 6]
    ... ]
    >>> print(matrix_divided(matrix, 2))
    Traceback (most recent call last):
    TypeError: matrix must be a matrix (list of lists) of integers/floats

Inconsistent Row Sizes
=====================

Finally, all the rows in ``matrix`` must be the same size. If any rows are
of different sizes, a new TypeError is raised.

    >>> matrix = [
    ...     [1, 2, 3, 4],
    ...     [5, 6, 7]
    ... ]
    >>> print(matrix_divided(matrix, 3))
    Traceback (most recent call last):
    TypeError: Each row of the matrix must have the same size

    >>> matrix = [
    ...     [1],
    ...     [2, 3],
    ...     [4]
    ... ]
    >>> print(matrix_divided(matrix, 1))
    Traceback (most recent call last):
    TypeError: Each row of the matrix must have the same size

    >>> matrix = [
    ...     [1, 2, 3],
    ...     [],
    ...     [4, 5, 6]
    ... ]
    >>> print(matrix_divided(matrix, 2))
    Traceback (most recent call last):
    TypeError: Each row of the matrix must have the same size

    >>> matrix = [
    ...     [1, 2, 3, 4, 5],
    ...     [6, 7, 8],
    ...     [9, 10, 11, 12, 13]
    ... ]
    >>> print(matrix_divided(matrix, 5))
    Traceback (most recent call last):
    TypeError: Each row of the matrix must have the same size

Invalid Divisors
===============

The parameter ``div`` must be either an int or float. Otherwise, a TypeError
is raised.

    >>> matrix = [
    ...     [1, 2, 3],
    ...     [4, 5, 6]
    ... ]
    >>> print(matrix_divided(matrix, "not a number"))
    Traceback (most recent call last):
    TypeError: div must be a number

    >>> print(matrix_divided(matrix, "5"))
    Traceback (most recent call last):
    TypeError: div must be a number

    >>> print(matrix_divided(matrix, None))
    Traceback (most recent call last):
    TypeError: div must be a number

    >>> print(matrix_divided(matrix, [2]))
    Traceback (most recent call last):
    TypeError: div must be a number

    >>> print(matrix_divided(matrix, {'div': 3}))
    Traceback (most recent call last):
    TypeError: div must be a number

    >>> print(matrix_divided(matrix, True))
    [[1.0, 2.0, 3.0], [4.0, 5.0, 6.0]]

    >>> print(matrix_divided(matrix, False))
    Traceback (most recent call last):
    ZeroDivisionError: division by zero

    >>> print(matrix_divided(matrix, complex(2, 3)))
    Traceback (most recent call last):
    TypeError: div must be a number

Zero Division Error
==================

``div`` must also be non-zero. Otherwise, a ZeroDivisionError is raised.

    >>> print(matrix_divided(matrix, 0))
    Traceback (most recent call last):
    ZeroDivisionError: division by zero

    >>> print(matrix_divided(matrix, 0.0))
    Traceback (most recent call last):
    ZeroDivisionError: division by zero

    >>> print(matrix_divided(matrix, -0))
    Traceback (most recent call last):
    ZeroDivisionError: division by zero

    >>> print(matrix_divided(matrix, -0.0))
    Traceback (most recent call last):
    ZeroDivisionError: division by zero

Special Float Values
===================

    >>> matrix = [
    ...     [1, 2],
    ...     [3, 4]
    ... ]
    >>> print(matrix_divided(matrix, float('inf')))
    [[0.0, 0.0], [0.0, 0.0]]

    >>> print(matrix_divided(matrix, float('-inf')))
    [[-0.0, -0.0], [-0.0, -0.0]]

    >>> print(matrix_divided(matrix, float('nan')))
    [[nan, nan], [nan, nan]]

Missing Arguments
================

    >>> print(matrix_divided())
    Traceback (most recent call last):
    TypeError: matrix_divided() missing 2 required positional arguments: 'matrix' and 'div'

    >>> matrix = [[1, 2], [3, 4]]
    >>> print(matrix_divided(matrix))
    Traceback (most recent call last):
    TypeError: matrix_divided() missing 1 required positional argument: 'div'

Too Many Arguments
=================

    >>> print(matrix_divided(matrix, 2, 3))
    Traceback (most recent call last):
    TypeError: matrix_divided() takes 2 positional arguments but 3 were given

    >>> print(matrix_divided(matrix, 2, 3, 4))
    Traceback (most recent call last):
    TypeError: matrix_divided() takes 2 positional arguments but 4 were given