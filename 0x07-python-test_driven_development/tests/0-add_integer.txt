======================================================
Testing for add_integer function
======================================================
This document tests the ``add_integer`` function from ``add_integer.py``.

    >>> add_integer = __import__("0-add_integer").add_integer

Basic Usage
===========
The function adds two integers and returns the result.

    >>> add_integer(5, 6)
    11
    >>> add_integer(15, 100)
    115
    >>> add_integer(2.9, 0.2)
    2
    >>> add_integer(-2.9, -0.2)
    -2

Two Floating Points
==================
    >>> add_integer(7.5, 2.5)
    9
    >>> add_integer(1.1, 2.9)
    3
    >>> add_integer(-1.5, -2.5)
    -3
    >>> add_integer(0.0, 0.0)
    0
    >>> add_integer(3.14159, 2.71828)
    5

One Floating Point
==================
    >>> add_integer(7, 2.5)
    9
    >>> add_integer(2.5, 7)
    9
    >>> add_integer(-5, 3.7)
    -2
    >>> add_integer(4.9, -2)
    2
    >>> add_integer(0, 1.5)
    1

Large Numbers
=============
    >>> add_integer(1000000, 2000000)
    3000000
    >>> add_integer(999999999999999999, 1)
    1000000000000000000
    >>> add_integer(1.0e10, 2.0e10)
    30000000000

Zero Cases
==========
    >>> add_integer(0, 0)
    0
    >>> add_integer(5, 0)
    5
    >>> add_integer(0, -3)
    -3
    >>> add_integer(0.0, 5)
    5
    >>> add_integer(-7, 0.0)
    -7

Negative Numbers
===============
    >>> add_integer(-5, -6)
    -11
    >>> add_integer(-10, 15)
    5
    >>> add_integer(20, -8)
    12
    >>> add_integer(-1.5, -2.5)
    -3
    >>> add_integer(-100.9, 50.1)
    -50

String Type Errors
==================
    >>> add_integer(7, "2.5")
    Traceback (most recent call last):
    TypeError: b must be an integer

    >>> add_integer("2.5", 7)
    Traceback (most recent call last):
    TypeError: a must be an integer

    >>> add_integer("2.5", "7")
    Traceback (most recent call last):
    TypeError: a must be an integer

    >>> add_integer("hello", 5)
    Traceback (most recent call last):
    TypeError: a must be an integer

    >>> add_integer(3, "world")
    Traceback (most recent call last):
    TypeError: b must be an integer

    >>> add_integer("", 0)
    Traceback (most recent call last):
    TypeError: a must be an integer

    >>> add_integer(0, "")
    Traceback (most recent call last):
    TypeError: b must be an integer

Argument Count Errors
====================
    >>> add_integer()
    Traceback (most recent call last):
    TypeError: add_integer() missing 1 required positional argument: 'a'

Single Argument (Default b=98)
==============================
    >>> add_integer(5)
    103
    >>> add_integer(0)
    98
    >>> add_integer(-5)
    93
    >>> add_integer(2.5)
    100
    >>> add_integer(-3.7)
    95

None Type Errors
===============
    >>> add_integer(None)
    Traceback (most recent call last):
    TypeError: a must be an integer

    >>> add_integer(5, None)
    Traceback (most recent call last):
    TypeError: b must be an integer

    >>> add_integer(None, None)
    Traceback (most recent call last):
    TypeError: a must be an integer

Infinity and NaN Errors
=======================
    >>> add_integer(float('inf'))
    Traceback (most recent call last):
    OverflowError: cannot convert float infinity to integer

    >>> add_integer(2, float('inf'))
    Traceback (most recent call last):
    OverflowError: cannot convert float infinity to integer

    >>> add_integer(float('-inf'))
    Traceback (most recent call last):
    OverflowError: cannot convert float infinity to integer

    >>> add_integer(float('-inf'), 5)
    Traceback (most recent call last):
    OverflowError: cannot convert float infinity to integer

    >>> add_integer(float('nan'))
    Traceback (most recent call last):
    ValueError: cannot convert float NaN to integer

    >>> add_integer(2, float('nan'))
    Traceback (most recent call last):
    ValueError: cannot convert float NaN to integer

    >>> add_integer(float('nan'), float('nan'))
    Traceback (most recent call last):
    ValueError: cannot convert float NaN to integer

Other Type Errors
=================
    >>> add_integer([1, 2, 3])
    Traceback (most recent call last):
    TypeError: a must be an integer

    >>> add_integer(5, [1, 2])
    Traceback (most recent call last):
    TypeError: b must be an integer

    >>> add_integer({'a': 1})
    Traceback (most recent call last):
    TypeError: a must be an integer

    >>> add_integer(3, {'b': 2})
    Traceback (most recent call last):
    TypeError: b must be an integer

    >>> add_integer(True)
    99

    >>> add_integer(5, False)
    5

    >>> add_integer(complex(1, 2))
    Traceback (most recent call last):
    TypeError: a must be an integer

    >>> add_integer(1, complex(3, 4))
    Traceback (most recent call last):
    TypeError: b must be an integer

Edge Case Floats
================
    >>> add_integer(1e-10, 2e-10)
    0
    >>> add_integer(0.999999, 0.000001)
    0
    >>> add_integer(1.000001, -0.000001)
    1
    >>> add_integer(-0.1, -0.9)
    0
    >>> add_integer(99.9, 0.1)
    99

Three or More Arguments
======================
    >>> add_integer(1, 2, 3)
    Traceback (most recent call last):
    TypeError: add_integer() takes from 1 to 2 positional arguments but 3 were given

    >>> add_integer(1, 2, 3, 4)
    Traceback (most recent call last):
    TypeError: add_integer() takes from 1 to 2 positional arguments but 4 were given